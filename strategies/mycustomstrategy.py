#!/usr/bin/env python3
"""
MyCustomStrategy Strategy
Generated by NSE Backtesting Engine Web Interface
Created: 2025-07-07 16:24:11
"""

import pandas as pd
import numpy as np
from zipline.api import symbol, order_target_percent, record
from engine.enhanced_base_strategy import BaseStrategy


class CustomSMAStrategy(BaseStrategy):
    def __init__(self, short_window=5, long_window=20):
        super().__init__()
        self.short_window = short_window
        self.long_window = long_window
        
        # Customize risk parameters
        self.risk_params.update({
            'max_position_size': 0.15,
            'stop_loss_pct': 0.08,
        })
    
    def select_universe(self, context):
        """Define trading universe"""
        return [symbol('SBIN'), symbol('RELIANCE'), symbol('HDFCBANK')]
    
    def generate_signals(self, context, data):
        """Generate trading signals"""
        signals = {}
        for asset in context.universe:
            try:
                prices = data.history(asset, 'price', self.long_window + 1, '1d')
                if len(prices) >= self.long_window:
                    short_ma = prices.tail(self.short_window).mean()
                    long_ma = prices.tail(self.long_window).mean()
                    
                    if short_ma > long_ma:
                        signals[asset] = 1.0  # Buy
                    else:
                        signals[asset] = -1.0  # Sell
                else:
                    signals[asset] = 0.0
            except Exception as e:
                signals[asset] = 0.0
        return signals


# Example usage
if __name__ == "__main__":
    from engine.enhanced_zipline_runner import EnhancedZiplineRunner

    print(f"🚀 Testing MyCustomStrategy")
    print("=" * 50)

    # Create strategy instance
    strategy = MyCustomStrategyStrategy()

    # Create runner
    runner = EnhancedZiplineRunner(
        strategy=strategy,
        bundle='nse-local-minute-bundle',
        start_date='2020-01-01',
        end_date='2021-01-01',
        capital_base=100000,
        benchmark_symbol='NIFTY50'
    )

    # Run backtest
    try:
        results = runner.run()
        if results is not None:
            print("✅ Backtest completed successfully!")
            runner.analyze(f'backtest_results/mycustomstrategy')
        else:
            print("❌ Backtest failed")
    except Exception as e:
        print(f"❌ Error: {e}")
